import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(page_title="–§—ñ–Ω–∞–Ω—Å–∏ + –ú–µ–¥—ñ–∞ + –†–µ–ø—É—Ç–∞—Ü—ñ—è", layout="wide")

st.title("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ ¬´–§—ñ–Ω–∞–Ω—Å–∏ + –ú–µ–¥—ñ–∞ + –†–µ–ø—É—Ç–∞—Ü—ñ—è¬ª")

st.markdown("""
–¶–µ–π –¥–∞—à–±–æ—Ä–¥ –¥–æ–∑–≤–æ–ª—è—î:
- –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ CSV-—Ñ–∞–π–ª—ñ–≤ —ñ–∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –∫–æ–º–ø–∞–Ω—ñ—ó (—Ñ—ñ–Ω–∞–Ω—Å–∏, –º–µ–¥—ñ–∞, –ø—É–±–ª—ñ—á–Ω–∏–π —ñ–º—ñ–¥–∂);
- –æ–±‚Äô—î–¥–Ω–∞—Ç–∏ —ó—Ö —É —Å–ø—ñ–ª—å–Ω–∏–π DataFrame;
- —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —ñ–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω—ñ–π;
- –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –≤–∫–ª–∞–¥–∫–∞–º–∏.
""")

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ ===
st.sidebar.header("–ó–∞–≤–∞–Ω—Ç–∞–∂ CSV-—Ñ–∞–π–ª–∏")
fin_file = st.sidebar.file_uploader("–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", type=["csv"])
med_file = st.sidebar.file_uploader("–ú–µ–¥—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏", type=["csv"])
rep_file = st.sidebar.file_uploader("–ü—É–±–ª—ñ—á–Ω–∏–π —ñ–º—ñ–¥–∂", type=["csv"])

# === –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
def read_csv(file):
    if file is not None:
        return pd.read_csv(file)
    return pd.DataFrame()

fin_df = read_csv(fin_file)
med_df = read_csv(med_file)
rep_df = read_csv(rep_file)

if fin_df.empty and med_df.empty and rep_df.empty:
    st.info("‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂ —Ö–æ—á–∞ –± –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏.")
    st.stop()

# === –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è ===
dfs = [df for df in [fin_df, med_df, rep_df] if not df.empty]
df = dfs[0]
for next_df in dfs[1:]:
    df = pd.merge(df, next_df, on="company", how="outer")

st.subheader("–û–±‚Äô—î–¥–Ω–∞–Ω–∏–π DataFrame")
st.dataframe(df)

# === –í–∞–≥–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ ===
st.sidebar.header("–í–∞–≥–∏ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
w_fin = st.sidebar.slider("–§—ñ–Ω–∞–Ω—Å–∏", 0.0, 1.0, 0.4)
w_med = st.sidebar.slider("–ú–µ–¥—ñ–∞", 0.0, 1.0, 0.3)
w_rep = st.sidebar.slider("–†–µ–ø—É—Ç–∞—Ü—ñ—è", 0.0, 1.0, 0.3)

total = w_fin + w_med + w_rep
w_fin, w_med, w_rep = w_fin/total, w_med/total, w_rep/total

# === –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É ===
df_calc = df.copy()

# –¥–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
def norm(series):
    if series.isna().all():
        return pd.Series(0.5, index=series.index)
    if series.max() == series.min():
        return pd.Series(0.5, index=series.index)
    return (series - series.min()) / (series.max() - series.min())

# –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–∫—Ä–µ–º–∏—Ö –≥—Ä—É–ø
fin_cols = [c for c in df.columns if "revenue" in c or "profit" in c or "growth" in c]
med_cols = [c for c in df.columns if "mention" in c or "sentiment" in c or "positive" in c]
rep_cols = [c for c in df.columns if "survey" in c or "nps" in c or "controvers" in c]

df_calc["fin_score"] = norm(df[fin_cols].select_dtypes("number").mean(axis=1))
df_calc["med_score"] = norm(df[med_cols].select_dtypes("number").mean(axis=1))
df_calc["rep_score"] = norm(df[rep_cols].select_dtypes("number").mean(axis=1))

df_calc["integral"] = (
    df_calc["fin_score"] * w_fin +
    df_calc["med_score"] * w_med +
    df_calc["rep_score"] * w_rep
)
df_calc["integral_100"] = 100 * norm(df_calc["integral"])

df_final = df_calc[["company", "fin_score", "med_score", "rep_score", "integral_100"]]\
    .sort_values("integral_100", ascending=False)

st.subheader("üèÜ –Ü–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–∞–Ω—ñ–π")
st.dataframe(df_final)

# === –í–∫–ª–∞–¥–∫–∏ ===
tab1, tab2, tab3 = st.tabs(["–§—ñ–Ω–∞–Ω—Å–∏", "–ú–µ–¥—ñ–∞", "–ü—É–±–ª—ñ—á–Ω–∏–π —ñ–º—ñ–¥–∂"])

with tab1:
    st.subheader("–§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
    if not fin_df.empty:
        st.dataframe(fin_df)
    else:
        st.warning("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π CSV.")

with tab2:
    st.subheader("–ú–µ–¥—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
    if not med_df.empty:
        st.dataframe(med_df)
    else:
        st.warning("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–µ–¥—ñ–π–Ω–∏–π CSV.")

with tab3:
    st.subheader("–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —ñ–º—ñ–¥–∂—É")
    if not rep_df.empty:
        st.dataframe(rep_df)
    else:
        st.warning("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ CSV –ø—É–±–ª—ñ—á–Ω–æ–≥–æ —ñ–º—ñ–¥–∂—É.")

st.success("‚úÖ –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
